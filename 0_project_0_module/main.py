def star():
    print('-' * 80, '\n   Добро пожаловать в игру крестики нолики "Tic-tac"!',
          '\nПравила игры простые: необходимо передать кординаты в формате,',
          '\nX= номер строки и Y= имя столбца:без пробела, в порядке.')
    matrix()


def matrix():  # Функция вывода игрового поля на экран
    print(' ', 'A', 'B', 'C')
    n = 0
    for i in game_matrix:
        print(n, *i)
        n += 1
    print("-" * 80)


def check_xy():  # Функция проверки кординат
    list_y = ['a', 'A', 'b', 'B', 'c', 'C']  # Список необходимый для проверки Y кординаты.
    while True:
        x_y = input("Ваш ход:")

        if len(x_y) != 2:  # Проверка кординаты на соответствие формату 2 символов
            print('Введите столбец и строку!')
            continue

        if x_y[1] in list_y and (
                x_y[0].isdigit()):  # Проверка параметров соотвествия при  x_y[1] буква состояшая в списке
            # и x_y[0] цифра

            if list_y.index(x_y[1]) <= 1:  # Переназначаем букву соотвествуюшему столбцу а,А=0 b,B=1 c,C=2
                y = 0
            elif list_y.index(x_y[1]) <= 3:
                y = 1
            else:
                y = 2
            x = int(x_y[0])

        elif x_y[0] in list_y and (x_y[1].isdigit()):

            if list_y.index(x_y[0]) <= 1:
                y = 0
            elif list_y.index(x_y[0]) <= 3:
                y = 1
            else:
                y = 2
            x = int(x_y[1])

        else:

            if (x_y[0].isdigit()) or x_y[1].isdigit():  # Проверка условий,
                # что обе переменные не цифры
                print('Введите столбец')
                continue

            if not (x_y[0].isdigit()) or not x_y[1].isdigit():  # Проверка условий,
                # что обе переменные не буквы
                print('Введите строку')
                continue
        if x < 0 or x > 2:  # Проверка x на соответсвия диапозону значений
            print("Не правильная кордината X")
            continue
        if game_matrix[x][y] != '#':  # Проверка свободной клетки
            print('Клетка занята')
            continue
        return x, y


def win_win():  # Функция для проверки
    win_comb = (((0, 0), (0, 1), (0, 2)),  # Условия выйгрыша 1 строка
                ((1, 0), (1, 1), (1, 2)),  # Условия выйгрыша 2 строка
                ((2, 0), (2, 1), (2, 2)),  # Условия выйгрыша 3 строка
                ((0, 0), (1, 0), (2, 0)),  # Условия выйгрыша 1 столбец
                ((0, 1), (1, 1), (2, 1)),  # Условия выйгрыша 2 столбец
                ((0, 2), (1, 2), (2, 2)),  # Условия выйгрыша 3 столбец
                ((0, 2), (1, 1), (2, 0)),  # Диоганаль справо на лево
                ((0, 0), (1, 1), (2, 2)))  # Диоганаль слево на право
    for win_str in win_comb:  # разворачиваем вложенный спаисок
        count_sym = []  # обьявляем переменную для построчного сравнения
        for c in win_str:
            count_sym.append(game_matrix[c[0]][c[1]])
        if count_sym == ["X", "X", "X"]:
            print("Выиграл игрок со знаком X")
            return True
        if count_sym == ["O", "O", "O"]:
            print("Выйграл игрок со знаком O")
            return True
    return False


game_matrix = [["#"] * 3 for i in range(3)]  # Инцилизируем игровое поле в виде
# матрицы, по ней будем определять победители и использовать для вывода псевдографики


star()  # Вызов  демонстрация условий игры

count = 0
while True:  # Запуск игры
    count += 1
    if count % 2 == 1:
        print('Нолик')
        x, y = check_xy()
        game_matrix[x][y] = 'O'
        matrix()

    elif count % 2 == 0:
        print('Крестик')
        x, y = check_xy()
        game_matrix[x][y] = 'X'
        matrix()

    if win_win():
        break
    if count == 9:
        print('Ничья')
        break
